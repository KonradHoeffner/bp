uses crt,konrad,picture;

type Paint15 = array[1..15,1..15] of byte;

{const Stein : Paint15=(
(26,26,26,26,26,26,26,26,26,26,26,26,26,26,23),
(26,23,23,23,23,23,23,23,23,23,23,23,23,23,20),
(26,23,23,23,23,23,23,23,23,23,23,23,23,23,20),
(26,23,23,23,23,23,23,23,23,23,23,23,23,23,20),
(26,23,23,23,23,23,23,23,23,23,23,23,23,23,20),
(26,23,23,23,23,23,23,23,23,23,23,23,23,23,20),
(26,23,23,23,23,23,23,23,23,23,23,23,23,23,20),
(26,23,23,23,23,23,23,23,23,23,23,23,23,23,20),
(26,23,23,23,23,23,23,23,23,23,23,23,23,23,20),
(26,23,23,23,23,23,23,23,23,23,23,23,23,23,20),
(26,23,23,23,23,23,23,23,23,23,23,23,23,23,20),
(26,23,23,23,23,23,23,23,23,23,23,23,23,23,20),
(26,23,23,23,23,23,23,23,23,23,23,23,23,23,20),
(26,23,23,23,23,23,23,23,23,23,23,23,23,23,20),
(23,20,20,20,20,20,20,20,20,20,20,20,20,20,20));}

const Stein : Paint15=(
(26,26,26,26,26,26,26,26,26,26,26,26,26,22,18),
(26,26,26,26,26,26,26,26,26,26,26,26,26,23,22),
(26,26,26,26,26,26,26,26,26,26,26,26,26,23,23),
(26,26,26,26,26,26,26,26,26,26,26,26,26,23,23),
(26,26,26,26,26,26,26,26,26,26,26,26,26,23,23),
(26,26,26,26,26,26,26,26,26,26,26,26,26,23,23),
(26,26,26,26,26,26,26,26,26,26,26,26,26,23,23),
(26,26,26,26,26,26,26,26,26,26,26,26,26,23,23),
(26,26,26,26,26,26,26,26,26,26,26,26,26,23,23),
(26,26,26,26,26,26,26,26,26,26,26,26,26,23,23),
(26,26,26,26,26,26,26,26,26,26,26,26,26,23,23),
(26,26,26,26,26,26,26,26,26,26,26,26,26,23,23),
(26,26,26,26,26,26,26,26,26,26,26,26,26,23,23),
(19,21,21,21,21,21,21,21,21,21,21,21,21,22,23),
(17,19,21,21,21,21,21,21,21,21,21,21,21,21,22));

const Black : Paint15=(
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ));

const Player1Front : Paint15=(
(0 ,0 ,0 ,19,23,25,52,52,52,25,23,19,0 ,0 ,0 ),
(0 ,0 ,20,25,25,24,53,53,53,24,25,25,20,0 ,0 ),
(0 ,0 ,25,26,24,23,54,54,54,23,24,25,25,0 ,0 ),
(0 ,0 ,25,24,23,23,55,55,55,23,23,24,25,0 ,0 ),
(0 ,0 ,25,24,64,64,64,64,64,64,64,24,25,0 ,0 ),
(0 ,0 ,22,24,64,70,64,64,64,70,64,24,22,0 ,0 ),
(0 ,0 ,17,20,64,64,64,2 ,64,64,64,20,19,0 ,0 ),
(0 ,0 ,0 ,0 ,22,64,64,64,64,64,22,0 ,0 ,0 ,0 ),
(0 ,70,26,27,26,25,25,25,25,25,26,27,26,70,0 ),
(0 ,0 ,26,27,26,25,25,4 ,25,25,26,27,26,0 ,0 ),
(0 ,0 ,0 ,0 ,25,25,4 ,4 ,4 ,25,26,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,25,25,25,25,25,25,26,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,5 ,6 ,6 ,5 ,0 ,5 ,6 ,6 ,5 ,0 ,0 ,0 ),
(0 ,0 ,22,2 ,2 ,2 ,0 ,0 ,0 ,2 ,2 ,2 ,22,0 ,0 ),
(0 ,0 ,2 ,2 ,2 ,2 ,0 ,0 ,0 ,2 ,2 ,2 ,2 ,0 ,0 ));

const Player1Back : Paint15=(
(0 ,0 ,0 ,19,23,25,52,52,52,25,23,19,0 ,0 ,0 ),
(0 ,0 ,20,25,25,24,53,53,53,24,25,25,20,0 ,0 ),
(0 ,0 ,25,26,24,23,54,54,54,23,24,25,25,0 ,0 ),
(0 ,0 ,25,24,23,23,55,55,55,23,23,24,25,0 ,0 ),
(0 ,0 ,25,24,23,22,55,55,55,22,23,24,25,0 ,0 ),
(0 ,0 ,22,24,22,22,21,21,21,21,22,24,22,0 ,0 ),
(0 ,0 ,17,20,22,21,21,21,21,21,21,20,19,0 ,0 ),
(0 ,0 ,0 ,0 ,22,64,64,64,64,64,22,0 ,0 ,0 ,0 ),
(0 ,70,26,27,26,25,25,25,25,25,26,27,26,70,0 ),
(0 ,0 ,26,27,26,25,25,25,25,25,26,27,26,0 ,0 ),
(0 ,0 ,0 ,0 ,25,25,25,25,25,25,26,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,25,25,25,25,25,25,26,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,5 ,6 ,6 ,5 ,0 ,5 ,6 ,6 ,5 ,0 ,0 ,0 ),
(0 ,0 ,22,2 ,2 ,2 ,0 ,0 ,0 ,2 ,2 ,2 ,22,0 ,0 ),
(0 ,0 ,2 ,2 ,2 ,2 ,0 ,0 ,0 ,2 ,2 ,2 ,2 ,0 ,0 ));

const Player1Right : Paint15=(
(0 ,0 ,0 ,19,22,26,25,24,24,22,19,0 ,0 ,0 ,0 ),
(0 ,0 ,20,26,26,25,25,25,25,23,23,19,0 ,0 ,0 ),
(0 ,0 ,26,25,25,24,24,24,24,24,24,22,0 ,0 ,0 ),
(0 ,0 ,26,25,24,24,23,23,23,23,23,22,0 ,0 ,0 ),
(0 ,0 ,26,25,24,23,22,22,22,22,22,19,0 ,0 ,0 ),
(0 ,0 ,26,25,24,23,22,21,64,2 ,64,0 ,0 ,0 ,0 ),
(0 ,0 ,17,20,20,20,20,64,64,64,64,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,19,6 ,64,64,64,64,64,6 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,26,23,23,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,26,26,23,26,23,23,70,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,26,26,23,26,23,23,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,26,26,26,23,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,5 ,6 ,6 ,5 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,2 ,2 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,2 ,2 ,2 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ));

const Player1Left : Paint15=(
(0 ,0 ,0 ,0 ,19,22,24,24,25,26,22,19,0 ,0 ,0 ),
(0 ,0 ,0 ,19,23,23,25,25,25,25,26,26,20,0 ,0 ),
(0 ,0 ,0 ,22,24,24,24,24,24,24,25,25,26,0 ,0 ),
(0 ,0 ,0 ,22,23,23,23,23,23,24,24,25,26,0 ,0 ),
(0 ,0 ,0 ,19,22,22,22,22,22,23,24,25,26,0 ,0 ),
(0 ,0 ,0 ,0 ,64,2 ,64,21,22,23,24,25,26,0 ,0 ),
(0 ,0 ,0 ,0 ,64,64,64,64,20,20,20,20,17,0 ,0 ),
(0 ,0 ,0 ,0 ,6 ,64,64,64,64,64,6 ,19,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,23,23,26,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,70,23,23,26,23,26,26,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,23,23,26,23,26,26,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,23,26,26,26,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ,6 ,6 ,5 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,2 ,2 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,2 ,2 ,2 ,2 ,0 ,0 ,0 ,0 ,0 ));

var t,t2     : integer;
    key      : char;
    Spieler1 : record
               x,y       : integer;
               oldx,oldy : integer;
               Front     : boolean;
               Back      : boolean;
               Left      : boolean;
               Right     : boolean;
               end;
    Steine   : record
               x,y : integer;
               end;

procedure Putpixel(x,y:integer; farbe:word);
 begin
  mem[$a000:320*y+x]:=farbe;
 end;

procedure Init13h;assembler;
 asm
  mov ax,13h
  int 10h
 end;

procedure Paint15_15(x,y:integer; sp:Paint15);
var x1,y1 : integer;
 begin
  for x1:=1 to 15 do
   for y1:=1 to 15 do
    putpixel(x+x1,y+y1,sp[y1,x1]);
 end;

procedure Stones;
var t2,x,y:integer;
 begin
  Steine.x:=1; Steine.y:=1;
  for t:=0 to 10 do
   for t2:=0 to 5 do Paint15_15(Steine.x+t*30,Steine.y+t2*30,Stein);
 end;

procedure OldXY;
 begin
  Spieler1.Oldx:=Spieler1.x;
  Spieler1.Oldy:=Spieler1.y;
 end;

procedure Waitretrace;
 begin
  repeat until (port[$3da] and $08) =  0;
  repeat until (port[$3da] and $08) <> 0;
 end;

procedure Init;
 begin
  Init13h;
   Spieler1.x:=16;
   Spieler1.y:=16;
 end;

procedure S1False; {Spieler1False}
 begin
  Spieler1.Right:=false;
  Spieler1.Left:=false;
  Spieler1.Front:=false;
  Spieler1.Back:=false;
 end;

begin
Init;

 repeat
  Stones;{Steine werden gemalt}
  OldXY;{Setz die Koordinaten fÅr Oldx und Oldy}

  if keypressed then key:=readkey else key:='n';
  case key of
  #77 : begin inc(Spieler1.x,15); S1False; Spieler1.Right:=true; end;
  #75 : begin dec(Spieler1.x,15); S1False; Spieler1.Left :=true; end;
  #80 : begin inc(Spieler1.y,15); S1False; Spieler1.Front:=true; end;
  #72 : begin dec(Spieler1.y,15); S1False; Spieler1.Back :=true; end;
  end;

  if Spieler1.Front then Paint15_15(Spieler1.x,Spieler1.y,Player1Front);
  if Spieler1.Back  then Paint15_15(Spieler1.x,Spieler1.y,Player1Back);
  if Spieler1.Left  then Paint15_15(Spieler1.x,Spieler1.y,Player1Left);
  if Spieler1.Right then Paint15_15(Spieler1.x,Spieler1.y,Player1Right);

  if keypressed then Paint15_15(Spieler1.x,Spieler1.y,Black);

  for t:=0 to 10 do
   for t2:=0 to 5 do
    begin
     if (Spieler1.x+7 < Steine.x+22+t *30) and{ob am Stein}
        (Spieler1.x+7 > Steine.x-8 +t *30) and{ob am Stein}
        (Spieler1.y+7 < Steine.y+22+t2*30) and{ob am Stein}
        (Spieler1.y+7 > Steine.y-8 +t2*30) or {ob am Stein}

        (Spieler1.x   <   1) or   {ob am Rand}
        (Spieler1.x+15> 319) or   {ob am Rand}
        (Spieler1.y   <   1) or   {ob am Rand}
        (Spieler1.y+15> 180) then {ob am Rand}
         begin
          Paint15_15(Spieler1.x,Spieler1.y,Black);
          Spieler1.x:=Spieler1.Oldx;
          Spieler1.y:=Spieler1.Oldy;
         end;
    end;
 until key = #27;
end.